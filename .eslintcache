[{"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/index.js":"1","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/App.js":"2","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/reportWebVitals.js":"3","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Login.jsx":"4","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/home.js":"5","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ResetPassword.jsx":"6","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/nav.js":"7","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Register.jsx":"8","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/CreateEvent.jsx":"9","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ForgotPassword.jsx":"10","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Activate.jsx":"11","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/EventDetails.jsx":"12","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ViewProfile.jsx":"13","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyEventDetails.jsx":"14","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyTickets.jsx":"15","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyEvents.jsx":"16","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/menu.js":"17","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/profile.js":"18","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/helpers/auth.js":"19"},{"size":500,"mtime":1619347876000,"results":"20","hashOfConfig":"21"},{"size":2139,"mtime":1619347876000,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1619347876000,"results":"23","hashOfConfig":"21"},{"size":4983,"mtime":1627615797992,"results":"24","hashOfConfig":"21"},{"size":4020,"mtime":1627668417510,"results":"25","hashOfConfig":"21"},{"size":3036,"mtime":1619347876000,"results":"26","hashOfConfig":"21"},{"size":6041,"mtime":1627614908860,"results":"27","hashOfConfig":"21"},{"size":6843,"mtime":1627615565081,"results":"28","hashOfConfig":"21"},{"size":39921,"mtime":1627669484623,"results":"29","hashOfConfig":"21"},{"size":3398,"mtime":1627664986486,"results":"30","hashOfConfig":"21"},{"size":3633,"mtime":1627664642190,"results":"31","hashOfConfig":"21"},{"size":27979,"mtime":1627668807939,"results":"32","hashOfConfig":"21"},{"size":5996,"mtime":1627665439610,"results":"33","hashOfConfig":"21"},{"size":20268,"mtime":1627669156226,"results":"34","hashOfConfig":"21"},{"size":8040,"mtime":1627666599248,"results":"35","hashOfConfig":"21"},{"size":4853,"mtime":1627669010821,"results":"36","hashOfConfig":"21"},{"size":3368,"mtime":1627665951200,"results":"37","hashOfConfig":"21"},{"size":3071,"mtime":1619347876000,"results":"38","hashOfConfig":"21"},{"size":2101,"mtime":1619347876000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"15sev35",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/index.js",[],["91","92"],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/App.js",["93","94"],"import './App.css';\nimport Nav from './Components/nav.js';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Home from './Components/home.js';\nimport Login from './Components/Login.jsx';\nimport CreateEvent from './Components/CreateEvent.jsx';\nimport Register from './Components/Register.jsx';\nimport Activate from './Components/Activate.jsx';\nimport Forget from './Components/ForgotPassword.jsx';\nimport Reset from './Components/ResetPassword.jsx';\nimport MyEvents from './Components/MyEvents.jsx';\nimport MyEventDetails from './Components/MyEventDetails.jsx';\nimport EventDetails from './Components/EventDetails.jsx';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ViewProfile from './Components/ViewProfile.jsx';\nimport MyTickets from './Components/MyTickets.jsx';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction App() {\n  return (\n    <div>\n      <ToastContainer/>\n      <Router>\n        \n        <Switch>\n          \n          <Route path = \"/register\" exact render = {props =><Register {...props}/>}/>\n          <Route path = \"/users/password/forget\" exact render = {props =><Forget {...props}/>}/>\n          <Route path = \"/users/activate/:token\" exact render = {props =><Activate {...props}/>}/>\n          <Route path = \"/users/password/reset/:token\" exact render = {props =><Reset {...props}/>}/>\n          <Route path = \"/login\" exact render = {props =><Login {...props}/>}/>\n          <Route path = \"/createEvent\" exact render = {props =><CreateEvent {...props}/>}/>\n          <Route path = \"/viewProfile\" exact render = {props =><ViewProfile {...props}/>}/>\n          <Route path = \"/myEvents\" exact render = {props =><MyEvents {...props}/>}/>\n          <Route path = \"/myTickets\" exact render = {props =><MyTickets {...props}/>}/>\n          <Route path = \"/myEventDetails/:event_id?\" exact render = {props =><MyEventDetails {...props}/>}/>\n          <Route path = \"/eventDetails/:event_id?\" exact render = {props =><EventDetails {...props}/>}/>\n          <Route path = \"/\" exact component={Home}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/reportWebVitals.js",[],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Login.jsx",[],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/home.js",["95"],"import React, { useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { Grid, Card, CardActionArea, CardContent } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\nimport { ToastContainer } from \"react-toastify\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  const [userId, setUserId] = React.useState();\n  const [allOtherEvents, setAllOtherEvents] = React.useState();\n  useEffect(() => {\n    if (localStorage.getItem(\"user\")) {\n      const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n      setUserId(user_id);\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getAllOtherEvents`, {\n          user_id: user_id,\n        })\n        .then((res) => {\n          const allOtherEvents = res.data;\n          setAllOtherEvents(allOtherEvents);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      const user_id = \"\";\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getAllOtherEvents`, {\n          user_id: user_id,\n        })\n        .then((res) => {\n          const allOtherEvents = res.data;\n          setAllOtherEvents(allOtherEvents);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, []);\n\n  const renderAllOtherEvents = (allOtherEvents) => {\n    return (\n      allOtherEvents &&\n      allOtherEvents.map((events, i) => {\n        return (\n          <Grid item xs={12} key={i} md={4} style={{ marginTop: \"20px\" }}>\n            <Link\n              to={\"/eventDetails/\" + events.event_id}\n              style={{ textDecoration: \"none\" }}\n            >\n              <Card style={{ backgroundColor: \"#FAF4AA\" }}>\n                <CardActionArea>\n                  <CardContent>\n                    <h1\n                      style={{\n                        fontFamily: \"Arial\",\n                        marginTop: \"0px\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {events.event_name}\n                    </h1>\n                    <Grid container spacing={2} style={{ fontFamily: \"Arial\" }}>\n                      <Grid item xs={12} md={6}>\n                        <b>From: </b>\n                        {events.from_date.slice(0, 10)}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>To: </b>\n                        {events.to_date.slice(0, 10)}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Booking Cost: </b>\n                        {events.ticket_price ? events.ticket_price : \"Free\"}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Available Ticket: </b>\n                        {events.ticket_limit}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Venue: </b>\n                        {events.proposed_venue}\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Link>\n          </Grid>\n        );\n      })\n    );\n  };\n  return (\n    <div>\n      <ToastContainer />\n      <Nav />\n\n      <div className=\"container\">\n        <h1\n          style={{\n            color: \"#5B4F5B\",\n            fontFamily: \"Arial\",\n            textAlign: \"center\",\n            fontSize: \"30px\",\n            borderBottom: \"2px Solid\",\n          }}\n        >\n          All Available Events\n        </h1>\n\n        <Grid container spacing={2}>\n          {renderAllOtherEvents(allOtherEvents)}\n        </Grid>\n        {/* <h1 style={{color:'#BF9000', fontFamily:\"Comic Sans MS\", fontSize:\"20px\", borderBottom:'2px Solid', width:\"155px\"}}>Ongoing Events</h1>\n            <h1 style={{color:'#BF9000', fontFamily:\"Comic Sans MS\", fontSize:\"20px\", borderBottom:'2px Solid', width:\"120px\"}}>Past Events</h1> */}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ResetPassword.jsx",["96"],"import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport LogoBlack from '../img/logoBlack.jpg';\nimport '../App.css';\nimport './registerStyle.css';\nimport {TextField, Button} from '@material-ui/core';\nconst ResetPassword = ({match}) => {\n  const [formData, setFormData] = useState({\n      password1: '',\n      password2: '',\n      token: '',\n  });\n    const { password1, password2, token } = formData;\n    \n    useEffect(() => {\n        let token = match.params.token\n        if(token) {\n            setFormData({...formData, token,})\n        }\n        \n    }, [])\n  const handleChange = text => e => {\n    setFormData({ ...formData, [text]: e.target.value });\n  };\n    const handleSubmit = e => {\n    e.preventDefault();\n    if ((password1 === password2) && password1 && password2) {\n      setFormData({ ...formData, textChange: 'Submitting' });\n      axios\n        .put(`${process.env.REACT_APP_API_URL}/resetpassword`, {\n            newPassword: password1,\n            resetPasswordLink: token\n        })\n        .then(res => {\n          console.log(res.data.message)\n            setFormData({\n              ...formData,\n               password1: '',\n              password2: ''\n            });\n\n            toast.success(res.data.message);\n        })\n        .catch(err => {\n          toast.error(err.response.data.error);\n          toast.error(err.response.data.errors);\n          \n        });\n    } else {\n      toast.error('Passwords don\\'t matches');\n    }\n  };\n  return (\n    <div>\n      <div className=\"formContainer\">\n            <div style={{display:\"flex\", textAlign:\"left\"}}>\n                <img src={LogoBlack} alt=\"logo\" className=\"formLogo\"/>\n                <div className='title'>\n                    <h1 style={{fontFamily:\"Comic Sans MS\", fontSize:\"70px\", marginTop:\"20px\"}}>Nepvent</h1>\n                    <h4 style={{fontFamily:\"MV Boli\", fontWeight:\"normal\", marginTop:\"-35px\", fontSize:\"30px\"}}>Event Publishing and Ticket Booking</h4>\n                </div>\n            </div>\n            <h1 style={{color:'goldenrod', fontFamily:\"Comic Sans MS\", fontSize:\"30px\", marginLeft:'30px'}}>\n              Reset Your Password\n            </h1>\n            <form onSubmit={handleSubmit}>                        \n                <div style={{marginTop:'30px'}}>\n                    <TextField required label=\"Password\" type='password' value={password1} onChange={handleChange('password1')} style={{marginLeft:\"55px\", width:\"35%\"}}/>\n                </div>\n                <div style={{marginTop:'30px'}}>\n                    <TextField required label=\"Confirm Password\" type='password' value={password2} onChange={handleChange('password2')} style={{marginLeft:\"55px\", width:\"35%\"}}/>\n                </div>\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" style = {{marginTop:'40px', marginLeft:'45px', width:'25%'}}> Submit </Button>  \n            </form>\n          </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/nav.js",["97","98","99","100","101","102"],"import React from \"react\";\nimport \"./navStyle.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport PropTypes from \"prop-types\";\nimport MyMenu from \"./menu.js\";\nimport MyProfile from \"./profile.js\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport LogoBlack from \"../img/logoBlack.jpg\";\nimport LogoWhite from \"../img/logoWhite.jpg\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  TextField,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\n\nconst CssTextField = withStyles({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"white\",\n    },\n    \"& .MuiInput-underline:before\": {\n      borderBottomColor: \"#aee5e8\",\n    },\n    \"& .MuiInput-underline\": {\n      \"&:hover:not($disabled):before\": {\n        borderBottomColor: \"white\",\n      },\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#aee5e8\",\n    },\n    \"& underline.Mui-focused\": {\n      borderBottomColor: \"#aee5e8\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"red\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"yellow\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\",\n      },\n    },\n  },\n})(TextField);\n\nconst styles = {\n  root: {\n    background: \"#fff\",\n  },\n  input: {\n    color: \"white\",\n  },\n};\nclass nav extends React.Component {\n  componentDidMount() {\n    document.querySelector(\".navbar\").className = \"navbar\";\n    window.addEventListener(\"scroll\", this.handleScroll);\n    // console.log(this.props.userName);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll = () => {\n    if (window.scrollY > 40) {\n      document.querySelector(\".navbar\").className = \"navbar activeNav\";\n      document.querySelector(\".mainHeader\").className = \"mainHeader invisible\";\n      document.querySelector(\".companySubTitle\").className = \"companySubTitle\";\n      document.querySelector(\".topBlankSpace\").className = \"topBlankSpace\";\n      document.querySelector(\".bottomBlankSpace\").className =\n        \"bottomBlankSpace\";\n      document.querySelector(\".navbarItems\").className =\n        \"navbarItems marginCorrection\";\n    } else {\n      document.querySelector(\".navbar\").className = \"navbar\";\n      document.querySelector(\".mainHeader\").className = \"mainHeader\";\n      document.querySelector(\".companySubTitle\").className =\n        \"companySubTitle invisible\";\n      document.querySelector(\".topBlankSpace\").className =\n        \"topBlankSpace invisible\";\n      document.querySelector(\".bottomBlankSpace\").className =\n        \"bottomBlankSpace invisible\";\n      document.querySelector(\".navbarItems\").className = \"navbarItems\";\n    }\n  };\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <div className=\"mainHeader\">\n          <img src={LogoBlack} alt=\"logo\" className=\"logo1\" />\n\n          <div className=\"title\">\n            <h1 style={{ fontFamily: \"Arial\", color: \"black\" }}>\n              <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\" }}>\n                Cervent\n              </Link>\n            </h1>\n            <h4\n              style={{\n                fontFamily: \"Arial\",\n                fontWeight: \"normal\",\n                marginTop: \"-20px\",\n                color: \"black\",\n              }}\n            >\n              <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\" }}>\n                Make Bookings for Your Event\n              </Link>\n            </h4>\n          </div>\n        </div>\n        <div\n          className=\"topBlankSpace invisible\"\n          style={{ zIndex: \"999\" }}\n        ></div>\n        <AppBar className=\"navbar\" style={{ zIndex: \"999\" }}>\n          <Toolbar>\n            <Typography variant=\"h6\">\n              <div className=\"companySubTitle invisible\">\n                <h4\n                  style={{\n                    fontFamily: \"Comic Sans MS\",\n                    color: \"whitesmoke\",\n                    marginLeft: \"82%\",\n                    marginTop: \"5%\",\n                  }}\n                >\n                  <u>\n                    <Link\n                      to=\"/\"\n                      style={{ textDecoration: \"none\", color: \"whitesmoke\" }}\n                    >\n                      Cervent\n                    </Link>\n                  </u>\n                </h4>\n                <img src={LogoBlack} alt=\"logo\" className=\"smallLogo\" />\n              </div>\n            </Typography>\n            <div className=\"navbarItems\">\n              <div className=\"searchBox\">\n                <SearchIcon\n                  style={{\n                    fontSize: \"40px\",\n                    color: \"whitesmoke\",\n                  }}\n                />\n                <CssTextField\n                  className={classes.margin}\n                  id=\"custom-css-standard-input\"\n                  placeholder=\"Search Events ...\"\n                  size=\"small\"\n                  InputProps={{ className: classes.input }}\n                  style={{\n                    width: \"400px\",\n                    marginLeft: \"5px\",\n                    marginTop: \"7px\",\n                  }}\n                />\n              </div>\n              <FormControl\n                variant=\"outlined\"\n                className={classes.formControl}\n                size=\"small\"\n                style={{\n                  width: \"200px\",\n                  marginTop: \"-3px\",\n                  marginLeft: \"25px\",\n                }}\n              ></FormControl>\n              <MyProfile userName={this.props.userName} />\n              <MyMenu userName={this.props.userName} />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <div\n          className=\"bottomBlankSpace invisible\"\n          style={{ zIndex: \"999\" }}\n        ></div>\n      </div>\n    );\n  }\n}\nnav.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(nav);\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Register.jsx",[],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/CreateEvent.jsx",["103","104","105","106","107","108","109","110","111","112","113","114","115"],"import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { TextField, Button, Grid, TextareaAutosize } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Nav from \"./nav.js\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nconst type = [\n  { title: \"Nuwaran\", category: \"Traditional events\" },\n  { title: \"Bratabanda\", category: \"Traditional events\" },\n  { title: \"Pashni\", category: \"Traditional events\" },\n  { title: \"Teej\", category: \"Traditional events\" },\n  { title: \"Seminars\", category: \"Corporate events\" },\n  { title: \"Conferences\", category: \"Corporate events\" },\n  { title: \"Trade shows\", category: \"Corporate events\" },\n  { title: \"Workshops\", category: \"Corporate events\" },\n  { title: \"Other\", category: \"Corporate events\" },\n  { title: \"Reunions\", category: \"Social events\" },\n  { title: \"Themed parties\", category: \"Social events\" },\n  { title: \"Other\", category: \"Social events\" },\n  { title: \"Webinars\", category: \"Virtual events\" },\n  { title: \"Classes\", category: \"Virtual events\" },\n  { title: \"Interactive performances\", category: \"Virtual events\" },\n  { title: \"Summits\", category: \"Virtual events\" },\n  { title: \"Other\", category: \"Virtual events\" },\n  { title: \"Auctions\", category: \"Fundraising events\" },\n  { title: \"Sponsored sporting events\", category: \"Fundraising events\" },\n  { title: \"Sales\", category: \"Fundraising events\" },\n  { title: \"Gala dinners\", category: \"Fundraising events\" },\n  { title: \"Other\", category: \"Fundraising events\" },\n  { title: \"Music festivals\", category: \"Festivals\" },\n  { title: \"Food festivals\", category: \"Festivals\" },\n  { title: \"Other\", category: \"Festivals\" },\n  { title: \"Street parties\", category: \"Community events\" },\n  { title: \"Swap shops\", category: \"Community events\" },\n  { title: \"Litter-picking\", category: \"Community events\" },\n  { title: \"Other\", category: \"Community events\" },\n  { title: \"Boutique shops\", category: \"Pop-up events\" },\n  { title: \"Food collaborations\", category: \"Pop-up events\" },\n  { title: \"Exercise classes\", category: \"Pop-up events\" },\n  { title: \"Other\", category: \"Pop-up events\" },\n];\n\nconst optionForEventType = [\"Online\", \"On Site\"];\n\nconst optionForTicketType = [\"Paid\", \"Free\"];\n\nconst CreateEvent = ({ match }) => {\n  const [allFiles, setAllFiles] = useState([]);\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    first_name: \"\",\n    middle_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    event_name: \"\",\n  });\n\n  const [eventCoordination, setEventCoordination] = useState({\n    event_manager_name: \"\",\n    manager_department: \"\",\n    event_id: \"\",\n    manager_telephone_number: \"\",\n    manager_mobile_number: \"\",\n    manager_email: \"\",\n  });\n  const [eventPurpose, setEventPurpose] = useState({\n    objectives: \"\",\n    event_id: \"\",\n    details: \"\",\n    guest_category: \"\",\n    vip_name: \"\",\n    host: \"\",\n    executives: \"\",\n    executives_role: \"\",\n    executives_date_time: \"\",\n    speech_points: \"\",\n    other_speakers: \"\",\n    media: \"\",\n    av: \"\",\n    catering: \"\",\n  });\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  const [toDate, setToDate] = React.useState(new Date());\n  const [noOfDays, setNoOfDays] = useState(\n    (toDate.setHours(0, 0, 0, 0) - selectedDate.setHours(0, 0, 0, 0)) /\n      86400000 +\n      1\n  );\n  const [toTime, setToTime] = useState(\"19:00\");\n  const [fromTime, setFromTime] = useState(\"07:00\");\n  const [eventTypeOptions, setEventTypeOptions] = useState(\n    optionForEventType[1]\n  );\n  const [ticketTypeOptions, setTicketTypeOptions] = useState(\n    optionForTicketType[0]\n  );\n  let from_date_temp = JSON.stringify(\n    new Date(\n      Date.UTC(\n        selectedDate.getFullYear(),\n        selectedDate.getMonth(),\n        selectedDate.getDate(),\n        selectedDate.getHours(),\n        selectedDate.getMinutes()\n      )\n    )\n  );\n  from_date_temp = from_date_temp.slice(1, 11);\n  let to_date_temp = JSON.stringify(\n    new Date(\n      Date.UTC(\n        toDate.getFullYear(),\n        toDate.getMonth(),\n        toDate.getDate(),\n        toDate.getHours(),\n        toDate.getMinutes()\n      )\n    )\n  );\n  to_date_temp = to_date_temp.slice(1, 11);\n  const [eventDetailsData, setEventDetailsData] = useState({\n    user_id: \"\",\n    event_id: \"\",\n    event_name: \"\",\n    ticket_price: \"\",\n    from_date: from_date_temp,\n    from_time: toTime,\n    to_date: to_date_temp,\n    to_time: fromTime,\n    event_category: \"\",\n    event_category_title: \"\",\n    other_category_description: \"\",\n    event_type: eventTypeOptions,\n    proposed_venue: \"\",\n    ticket_type: ticketTypeOptions,\n    ticket_limit: \"\",\n    link: \"\",\n    no_of_days: noOfDays,\n    number_of_expected_guest: \"\",\n  });\n  const [noOfExpectedGuests, setNoOfExpectedGuests] = useState();\n  const [ticketLimit, setTicketLimit] = useState();\n  const [value, setValue] = useState();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [otherCategory, setOtherCategory] = useState(false);\n  const [typeOnline, setTypeOnline] = useState(false);\n  const [ticketPaid, setTicketPaid] = useState(true);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const [eventType, setEventType] = React.useState(\"\");\n  const [ticketype, setticketType] = useState(\"\");\n\n  const handleDateChange = (date) => {\n    if (date.setHours(0, 0, 0, 0) > toDate.setHours(0, 0, 0, 0)) {\n      toast.error(\"From-date cant be greater than To-date\");\n    } else {\n      setSelectedDate(date);\n      setNoOfDays(\n        (toDate.setHours(0, 0, 0, 0) - date.setHours(0, 0, 0, 0)) / 86400000 + 1\n      );\n      setToTime(\"--:--\");\n      setFromTime(\"--:--\");\n      const no_of_days =\n        (toDate.setHours(0, 0, 0, 0) - date.setHours(0, 0, 0, 0)) / 86400000 +\n        1;\n      let from_date = JSON.stringify(\n        new Date(\n          Date.UTC(\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes()\n          )\n        )\n      );\n      from_date = from_date.slice(1, 11);\n      setEventDetailsData({ ...eventDetailsData, from_date, no_of_days });\n    }\n  };\n  const handleCategoryChange = (event, newValue) => {\n    if (newValue != null) {\n      setValue(newValue);\n      const other_category_description = \"\";\n      const event_category = newValue.category;\n      const event_category_title = newValue.title;\n      setEventDetailsData({\n        ...eventDetailsData,\n        other_category_description,\n        event_category,\n        event_category_title,\n      });\n      if (newValue.title == \"Other\") {\n        setOtherCategory(true);\n      } else {\n        setOtherCategory(false);\n      }\n    } else {\n      setOtherCategory(false);\n    }\n  };\n  const handleTicketTypeChange = (event, newValue) => {\n    setTicketTypeOptions(newValue);\n    const ticket_type = newValue;\n    setEventDetailsData({ ...eventDetailsData, ticket_type });\n    if (newValue != null) {\n      if (newValue == \"Paid\") {\n        setTicketPaid(true);\n      } else {\n        setTicketPaid(false);\n      }\n    } else {\n      setTicketPaid(false);\n    }\n  };\n  const handleTypeChange = (event, newValue) => {\n    setEventTypeOptions(newValue);\n    const event_type = newValue;\n    setEventDetailsData({ ...eventDetailsData, event_type });\n    if (newValue != null) {\n      if (newValue == \"Online\") {\n        setTypeOnline(true);\n      } else {\n        setTypeOnline(false);\n      }\n    } else {\n      setTypeOnline(false);\n    }\n  };\n  const handleToDateChange = (date) => {\n    if (date.setHours(0, 0, 0, 0) < selectedDate.setHours(0, 0, 0, 0)) {\n      toast.error(\"To-date cant be less than from-Date\");\n    } else {\n      setToDate(date);\n      setNoOfDays(\n        (date.setHours(0, 0, 0, 0) - selectedDate.setHours(0, 0, 0, 0)) /\n          86400000 +\n          1\n      );\n      setToTime(\"--:--\");\n      setFromTime(\"--:--\");\n      const no_of_days =\n        (date.setHours(0, 0, 0, 0) - selectedDate.setHours(0, 0, 0, 0)) /\n          86400000 +\n        1;\n      let to_date = JSON.stringify(\n        new Date(\n          Date.UTC(\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes()\n          )\n        )\n      );\n      to_date = to_date.slice(1, 11);\n      setEventDetailsData({ ...eventDetailsData, to_date, no_of_days });\n    }\n  };\n  const handleToTimeChange = (e) => {\n    if (selectedDate.setHours(0, 0, 0, 0) == toDate.setHours(0, 0, 0, 0)) {\n      if (e.target.value.split(\":\")[0] < fromTime.split(\":\")[0]) {\n        toast.error(\"To-time cant be less than from-time on same day\");\n      } else if (e.target.value.split(\":\")[0] == fromTime.split(\":\")[0]) {\n        if (e.target.value.split(\":\")[1] < fromTime.split(\":\")[1]) {\n          toast.error(\"To-time cant be less than from-time on same day\");\n        } else {\n          setToTime(e.target.value);\n          const to_time = e.target.value;\n          setEventDetailsData({ ...eventDetailsData, to_time });\n        }\n      } else {\n        setToTime(e.target.value);\n        const to_time = e.target.value;\n        setEventDetailsData({ ...eventDetailsData, to_time });\n      }\n    } else {\n      setToTime(e.target.value);\n      const to_time = e.target.value;\n      setEventDetailsData({ ...eventDetailsData, to_time });\n    }\n  };\n  const handleFromTimeChange = (e) => {\n    if (selectedDate.setHours(0, 0, 0, 0) == toDate.setHours(0, 0, 0, 0)) {\n      if (e.target.value.split(\":\")[0] > toTime.split(\":\")[0]) {\n        toast.error(\"From-time cant be more than To-time on same day\");\n      } else if (e.target.value.split(\":\")[0] == toTime.split(\":\")[0]) {\n        if (e.target.value.split(\":\")[1] > toTime.split(\":\")[1]) {\n          toast.error(\"From-time cant be more than To-time on same day\");\n        } else {\n          setFromTime(e.target.value);\n          const from_time = e.target.value;\n          setEventDetailsData({ ...eventDetailsData, from_time });\n        }\n      } else {\n        setFromTime(e.target.value);\n        const from_time = e.target.value;\n        setEventDetailsData({ ...eventDetailsData, from_time });\n      }\n    } else {\n      setFromTime(e.target.value);\n      const from_time = e.target.value;\n      setEventDetailsData({ ...eventDetailsData, from_time });\n    }\n  };\n  const optionsEventCategories = type.map((option) => {\n    const category = option.category;\n    return {\n      category: category,\n      ...option,\n    };\n  });\n\n  useEffect(() => {\n    /**get token from params like /active/token\n     * then decode the token to get name\n     */\n    const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n\n    const email = JSON.parse(localStorage.getItem(\"user\"))[\"email\"];\n    let { first_name, middle_name, last_name } = JSON.parse(\n      localStorage.getItem(\"user\")\n    );\n\n    if (email) {\n      setFormData({ ...formData, first_name, middle_name, last_name, email });\n    }\n    if (user_id) {\n      axios\n        .get(`${process.env.REACT_APP_EVENT_API_URL}/getMaxId`)\n        .then((res) => {\n          if (res.data.length != 0) {\n            console.log(res.data);\n            const event_id = Number(res.data[0].event_id) + 1;\n            console.log(event_id);\n            setEventDetailsData({ ...eventDetailsData, event_id, user_id });\n            setEventCoordination({ ...eventCoordination, event_id });\n            setEventPurpose({ ...eventPurpose, event_id });\n          } else {\n            const event_id = 1;\n            setEventDetailsData({ ...eventDetailsData, event_id, user_id });\n            setEventCoordination({ ...eventCoordination, event_id });\n            setEventPurpose({ ...eventPurpose, event_id });\n          }\n        })\n        .catch((err) => {\n          console.log(err.response);\n        });\n    }\n  }, [match.params]);\n  const { first_name, middle_name, last_name } = formData;\n  const { other_category_description, link, proposed_venue, ticket_price } =\n    eventDetailsData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    for (var i = 0; i < allFiles.length; i++) {\n      console.log(\"pragya\");\n      const fd = new FormData();\n      fd.append(\"image\", allFiles[i], allFiles[i].name);\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/uploadImage`, fd)\n        .then((res) => {\n          const file_name_temp = res.data.eventImage.file_name;\n          axios\n            .post(`${process.env.REACT_APP_EVENT_API_URL}/linkImageAndEvent`, {\n              file_name: file_name_temp,\n              event_id: eventDetailsData.event_id,\n            })\n            .then((res) => {\n              console.log(res);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    // window.location.reload();\n    // const fd = new FormData();\n    // fd.append('image', selectedFiles,selectedFiles);\n\n    console.log(eventDetailsData);\n    console.log(\"lol\");\n    console.log(eventCoordination);\n    console.log(\"hehe\");\n    console.log(eventPurpose);\n    console.log(\"wtf\");\n    console.log(\n      selectedDate,\n      toDate,\n      eventType,\n      noOfDays,\n      toTime,\n      fromTime,\n      value,\n      inputValue,\n      otherCategory,\n      selectedFiles,\n      formData\n    );\n    axios\n      .post(`${process.env.REACT_APP_EVENT_API_URL}/add`, {\n        eventDetailsData: eventDetailsData,\n        eventPurpose: eventPurpose,\n        eventCoordination: eventCoordination,\n      })\n      .then((res) => {\n        toast.success(res.data.message);\n        history.push(\"/myEvents\");\n      })\n      .catch((err) => {\n        console.log(err.response);\n        toast.error(err.response.data.errors);\n      });\n  };\n  const handleImageChange = (e) => {\n    // console.log(e.target.files[])\n    let allFilesTemp = allFiles;\n\n    for (var i = 0; i < e.target.files.length; i++) {\n      allFilesTemp.push(e.target.files[i]);\n    }\n    setAllFiles(allFilesTemp);\n    if (e.target.files) {\n      const filesArray = Array.from(e.target.files).map((file) =>\n        URL.createObjectURL(file)\n      );\n\n      console.log(allFiles);\n      console.log(\"filesArray: \", filesArray);\n      console.log(e.target.files);\n      setSelectedFiles((prevImages) => prevImages.concat(filesArray));\n      Array.from(e.target.files).map(\n        (file) => URL.revokeObjectURL(file) // avoid memory leak\n      );\n    }\n  };\n\n  const renderPhotos = (source) => {\n    return source.map((photo) => {\n      return (\n        <img\n          src={photo}\n          alt=\"\"\n          key={photo}\n          style={{\n            width: \"334px\",\n            height: \"190px\",\n            objectFit: \"cover\",\n            padding: \"0.75rem\",\n          }}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 flex justify-center\">\n      <Nav />\n      <div className=\"container2\">\n        <h1\n          style={{\n            color: \"#5B4F5B\",\n            textAlign: \"center\",\n            fontFamily: \"Arial\",\n            fontSize: \"30px\",\n            borderBottom: \"2px Solid\",\n          }}\n        >\n          Create New Event\n        </h1>\n        <h1\n          style={{\n            color: \"#5662F6\",\n            fontFamily: \"Arial\",\n            fontSize: \"20px\",\n            borderBottom: \"2px Solid\",\n            width: \"140px\",\n          }}\n        >\n          Event Details\n        </h1>\n        <form style={{ width: \"100%\" }} onSubmit={handleSubmit}>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"Event Name\"\n                  // value={event_name}\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const event_name = event.target.value;\n                    setEventDetailsData({ ...eventDetailsData, event_name });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <div style={{ marginTop: \"15px\" }}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <KeyboardDatePicker\n                    style={{ width: \"100%\" }}\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"From Date\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedDate}\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                      \"aria-label\": \"change date\",\n                    }}\n                  />\n                </MuiPickersUtilsProvider>\n              </div>\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  id=\"time\"\n                  label=\"From Time\"\n                  style={{ width: \"100%\" }}\n                  type=\"time\"\n                  required\n                  value={fromTime}\n                  onChange={handleFromTimeChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  inputProps={{\n                    step: 300, // 5 min\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <div style={{ marginTop: \"15px\" }}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <KeyboardDatePicker\n                    style={{ width: \"100%\" }}\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"To Date\"\n                    format=\"MM/dd/yyyy\"\n                    value={toDate}\n                    onChange={handleToDateChange}\n                    KeyboardButtonProps={{\n                      \"aria-label\": \"change date\",\n                    }}\n                  />\n                </MuiPickersUtilsProvider>\n              </div>\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  id=\"time\"\n                  label=\"To Time\"\n                  required\n                  style={{ width: \"100%\" }}\n                  type=\"time\"\n                  value={toTime}\n                  onChange={handleToTimeChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  inputProps={{\n                    step: 300, // 5 min\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <Autocomplete\n                  style={{ width: \"100%\" }}\n                  value={value}\n                  onChange={handleCategoryChange}\n                  inputValue={inputValue}\n                  onInputChange={(event, newInputValue) => {\n                    setInputValue(newInputValue);\n                  }}\n                  id=\"controllable-states-demo\"\n                  options={optionsEventCategories.sort(\n                    (a, b) => -b.category.localeCompare(a.category)\n                  )}\n                  groupBy={(option) => option.category}\n                  getOptionLabel={(option) => option.title}\n                  style={{ width: \"100%\" }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      required\n                      label=\"Event Categories\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </div>\n            </Grid>\n            {otherCategory ? (\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Other Category Description\"\n                    value={other_category_description}\n                    style={{ width: \"100%\" }}\n                    onChange={(event) => {\n                      const other_category_description = event.target.value;\n                      setEventDetailsData({\n                        ...eventDetailsData,\n                        other_category_description,\n                      });\n                    }}\n                  />\n                </div>\n              </Grid>\n            ) : null}\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <Autocomplete\n                  value={eventTypeOptions}\n                  onChange={handleTypeChange}\n                  inputValue={eventType}\n                  onInputChange={(event, newInputValue) => {\n                    setEventType(newInputValue);\n                  }}\n                  options={optionForEventType}\n                  style={{ width: \"100%\" }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      required\n                      label=\"Event Type\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </div>\n            </Grid>\n            {typeOnline ? (\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    value={link}\n                    label=\"Link\"\n                    style={{ width: \"100%\" }}\n                    onChange={(event) => {\n                      const link = event.target.value;\n                      const proposed_venue = \"\";\n                      setEventDetailsData({\n                        ...eventDetailsData,\n                        link,\n                        proposed_venue,\n                      });\n                    }}\n                  />\n                </div>\n              </Grid>\n            ) : (\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    value={proposed_venue}\n                    label=\"Proposed Venue\"\n                    style={{ width: \"100%\" }}\n                    onChange={(event) => {\n                      const proposed_venue = event.target.value;\n                      const link = \"\";\n                      setEventDetailsData({\n                        ...eventDetailsData,\n                        proposed_venue,\n                        link,\n                      });\n                    }}\n                  />\n                </div>\n              </Grid>\n            )}\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"No. of Days\"\n                  value={noOfDays}\n                  disabled\n                  style={{ width: \"100%\" }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  value={noOfExpectedGuests}\n                  label=\"Number of expected guests\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    console.log(Number(event.target.value));\n                    if (isNaN(Number(event.target.value))) {\n                      toast.error(\n                        \"Number of expected guests must be integer value\"\n                      );\n                      setNoOfExpectedGuests(\"\");\n                    } else {\n                      const number_of_expected_guest = Number(\n                        event.target.value\n                      );\n                      setEventDetailsData({\n                        ...eventDetailsData,\n                        number_of_expected_guest,\n                      });\n                      setNoOfExpectedGuests(event.target.value);\n                    }\n                  }}\n                />\n              </div>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <Autocomplete\n                  value={ticketTypeOptions}\n                  onChange={handleTicketTypeChange}\n                  inputValue={ticketype}\n                  onInputChange={(event, newInputValue) => {\n                    setticketType(newInputValue);\n                  }}\n                  options={optionForTicketType}\n                  style={{ width: \"100%\" }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      required\n                      label=\"Ticket Type\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </div>\n            </Grid>\n            {ticketPaid ? (\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Ticket Price (RS)\"\n                    value={ticket_price}\n                    style={{ width: \"100%\" }}\n                    onChange={(event) => {\n                      if (isNaN(Number(event.target.value))) {\n                        toast.error(\"Ticket Price must be integer value\");\n                        const ticket_price = \"\";\n                        setEventDetailsData({\n                          ...eventDetailsData,\n                          ticket_price,\n                        });\n                      } else {\n                        const ticket_price = event.target.value;\n                        setEventDetailsData({\n                          ...eventDetailsData,\n                          ticket_price,\n                        });\n                      }\n                    }}\n                  />\n                </div>\n              </Grid>\n            ) : null}\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  value={ticketLimit}\n                  label=\"Ticket Limit\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    if (isNaN(Number(event.target.value))) {\n                      toast.error(\"Ticket Limit must be integer value\");\n                      setTicketLimit(\"\");\n                    } else {\n                      const ticket_limit = Number(event.target.value);\n                      setEventDetailsData({\n                        ...eventDetailsData,\n                        ticket_limit,\n                      });\n                      setTicketLimit(event.target.value);\n                    }\n                  }}\n                />\n              </div>\n            </Grid>\n\n            <Grid item xs={12} md={12}>\n              <div>\n                <input\n                  type=\"file\"\n                  id=\"file\"\n                  multiple\n                  onChange={handleImageChange}\n                />\n                <h3\n                  style={{\n                    fontFamily: \"Arial\",\n                    fontWeight: \"bold\",\n                    marginTop: \"20px\",\n                    color: \"#5662F6\",\n                    borderBottom: \"2px solid\",\n                    width: \"16%\",\n                  }}\n                >\n                  Insert Images:\n                </h3>\n                <div className=\"label-holder\">\n                  <label htmlFor=\"file\" className=\"label\">\n                    <i className=\"material-icons\">add_a_photo</i>\n                  </label>\n                </div>\n                <div className=\"result\">{renderPhotos(selectedFiles)}</div>\n              </div>\n            </Grid>\n          </Grid>\n          <h1\n            style={{\n              color: \"#5662F6\",\n              fontFamily: \"Arial\",\n              fontSize: \"20px\",\n              marginTop: \"50px\",\n              borderBottom: \"2px Solid\",\n              width: \"150px\",\n            }}\n          >\n            Event Purpose\n          </h1>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"30px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Strategic Objectves / Expected Outcomes:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Strategic Objectves / Expected Outcomes:\"\n                  onChange={(event) => {\n                    const objectives = event.target.value;\n                    setEventPurpose({ ...eventPurpose, objectives });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>Details of the Event:</h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Details of the Event:\"\n                  onChange={(event) => {\n                    const details = event.target.value;\n                    setEventPurpose({ ...eventPurpose, details });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Categories of Expected Guests:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Categories of Expected Guests:\"\n                  onChange={(event) => {\n                    const guest_category = event.target.value;\n                    setEventPurpose({ ...eventPurpose, guest_category });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Name of Expected External VIPs, if any:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Name of Expected External VIPs, if any:\"\n                  onChange={(event) => {\n                    const vip_name = event.target.value;\n                    setEventPurpose({ ...eventPurpose, vip_name });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-20px\" }}>\n                <TextField\n                  required\n                  label=\"Master of Ceremony (Host)\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const host = event.target.value;\n                    setEventPurpose({ ...eventPurpose, host });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <div style={{ marginTop: \"-20px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Executives Required for this Event:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Executives Required for this Event:\"\n                  onChange={(event) => {\n                    const executives = event.target.value;\n                    setEventPurpose({ ...eventPurpose, executives });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <div style={{ marginTop: \"-20px\" }}>\n                <h4 style={{ color: \"gray\" }}>Proposed role of Executives:</h4>\n                <TextareaAutosize\n                  style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Proposed role of Executives:\"\n                  onChange={(event) => {\n                    const executives_role = event.target.value;\n                    setEventPurpose({ ...eventPurpose, executives_role });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Date and Time Executive will be required:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Date and Time Executive will be required:\"\n                  onChange={(event) => {\n                    const executives_date_time = event.target.value;\n                    setEventPurpose({ ...eventPurpose, executives_date_time });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Proposed speech points will be provided for the Executives:\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Proposed speech points will be provided for the Executives:\"\n                  onChange={(event) => {\n                    const speech_points = event.target.value;\n                    setEventPurpose({ ...eventPurpose, speech_points });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>Other speakers</h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Other speakers\"\n                  onChange={(event) => {\n                    const other_speakers = event.target.value;\n                    setEventPurpose({ ...eventPurpose, other_speakers });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>Are media invited / expected</h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Are media invited / expected\"\n                  onChange={(event) => {\n                    const media = event.target.value;\n                    setEventPurpose({ ...eventPurpose, media });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <div style={{ marginTop: \"-40px\" }}>\n                <h4 style={{ color: \"gray\" }}>\n                  Will there be catering (Please Specify)\n                </h4>\n                <TextareaAutosize\n                  style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                  rowsMin={3}\n                  placeholder=\"Will there be catering (Please Specify)\"\n                  onChange={(event) => {\n                    const catering = event.target.value;\n                    setEventPurpose({ ...eventPurpose, catering });\n                  }}\n                />\n              </div>\n            </Grid>\n          </Grid>\n          <h1\n            style={{\n              color: \"#5662F6\",\n              fontFamily: \"Arial\",\n              fontSize: \"20px\",\n              marginTop: \"60px\",\n              borderBottom: \"2px Solid\",\n              width: \"200px\",\n            }}\n          >\n            Event Coordination\n          </h1>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={8}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"Name of Event Manager\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const event_manager_name = event.target.value;\n                    setEventCoordination({\n                      ...eventCoordination,\n                      event_manager_name,\n                    });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"Department\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const manager_department = event.target.value;\n                    setEventCoordination({\n                      ...eventCoordination,\n                      manager_department,\n                    });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  label=\"Telephone Number\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const manager_telephone_number = event.target.value;\n                    setEventCoordination({\n                      ...eventCoordination,\n                      manager_telephone_number,\n                    });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"Mobile Number\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const manager_mobile_number = event.target.value;\n                    setEventCoordination({\n                      ...eventCoordination,\n                      manager_mobile_number,\n                    });\n                  }}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <div style={{ marginTop: \"30px\" }}>\n                <TextField\n                  required\n                  label=\"Email\"\n                  style={{ width: \"100%\" }}\n                  onChange={(event) => {\n                    const manager_email = event.target.value;\n                    setEventCoordination({\n                      ...eventCoordination,\n                      manager_email,\n                    });\n                  }}\n                />\n              </div>\n            </Grid>\n          </Grid>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginTop: \"40px\", width: \"25%\" }}\n          >\n            {\" \"}\n            Submit{\" \"}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateEvent;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ForgotPassword.jsx",[],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/Activate.jsx",["116","117"],"import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport jwt from \"jsonwebtoken\";\nimport { isAuth } from \"../helpers/auth\";\nimport { Redirect } from \"react-router-dom\";\nimport LogoBlack from \"../img/logoBlack.jpg\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { Button } from \"@material-ui/core\";\n\nfunction handleCancle() {\n  window.location = \"/\";\n}\nfunction handleRegister() {\n  window.location = \"/login\";\n}\nconst Activate = ({ match }) => {\n  const [formData, setFormData] = useState({\n    first_name: \"\",\n    middle_name: \"\",\n    last_name: \"\",\n    token: \"\",\n    show: true,\n  });\n\n  useEffect(() => {\n    /**get token from params like /active/token\n     * then decode the token to get name\n     */\n    let token = match.params.token;\n    let { first_name, middle_name, last_name } = jwt.decode(token);\n\n    if (token) {\n      setFormData({ ...formData, first_name, middle_name, last_name, token });\n    }\n\n    console.log(token, first_name, middle_name, last_name);\n  }, [match.params]);\n  const { first_name, middle_name, last_name, token, show } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/activation`, {\n        token,\n      })\n      .then((res) => {\n        setFormData({\n          ...formData,\n          show: false,\n        });\n\n        toast.success(res.data.message);\n      })\n      .catch((err) => {\n        toast.error(err.response.data.errors);\n      });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 flex justify-center\">\n      {isAuth() ? <Redirect to=\"/\" /> : null}\n      <div className=\"formContainer\">\n        <div style={{ display: \"flex\", textAlign: \"left\" }}>\n          <img src={LogoBlack} alt=\"logo\" className=\"formLogo\" />\n          <div className=\"title\">\n            <h1\n              style={{\n                fontFamily: \"Comic Sans MS\",\n                fontSize: \"70px\",\n                marginTop: \"20px\",\n              }}\n            >\n              Cervent\n            </h1>\n            <h4\n              style={{\n                fontFamily: \"MV Boli\",\n                fontWeight: \"normal\",\n                marginTop: \"-35px\",\n                fontSize: \"30px\",\n              }}\n            >\n              Make Bookings of Your Event\n            </h4>\n          </div>\n        </div>\n        <h1\n          style={{\n            color: \"goldenrod\",\n            fontFamily: \"Comic Sans MS\",\n            fontSize: \"30px\",\n          }}\n        >\n          Welcome {first_name + \" \" + middle_name + \" \" + last_name}\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginTop: \"40px\", marginLeft: \"45px\", width: \"25%\" }}\n          >\n            {\" \"}\n            Activate your Account{\" \"}\n          </Button>\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"button\"\n            style={{ marginTop: \"40px\", marginLeft: \"40px\", width: \"10%\" }}\n            onClick={handleRegister}\n          >\n            {\" \"}\n            Login{\" \"}\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"button\"\n            style={{ marginTop: \"40px\", marginLeft: \"20px\", width: \"10%\" }}\n            onClick={handleCancle}\n          >\n            {\" \"}\n            Cancle{\" \"}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Activate;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/EventDetails.jsx",["118","119","120"],"import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport { isAuth } from \"../helpers/auth\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { TextField, Button, Grid, TextareaAutosize } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\n\nconst EventDetails = ({ match, history }) => {\n  const [eventDetails, setEventDetails] = useState();\n  const [eventPurpose, setEventPurpose] = useState();\n  const [eventCoordiation, setEventCoordiation] = useState();\n  const [eventImages, setEventImages] = useState();\n  const [eventId, setEventId] = useState();\n  const [ticketId, setTicketId] = useState();\n  const [enrolled, setEnrolled] = useState(false);\n  useEffect(() => {\n    let eventId = match.params.event_id;\n    setEventId(eventId);\n    if (eventId) {\n      if (isAuth()) {\n        const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n        axios\n          .post(`${process.env.REACT_APP_EVENT_API_URL}/getEnrolled`, {\n            user_id: user_id,\n            event_id: eventId,\n          })\n          .then((res) => {\n            if (res.data.length != 0) {\n              setEnrolled(true);\n            } else {\n              setEnrolled(false);\n            }\n          });\n      }\n      axios\n        .get(`${process.env.REACT_APP_EVENT_API_URL}/getMaxTicketId`)\n        .then((res) => {\n          if (res.data.length != 0) {\n            console.log(res.data);\n            const ticketId = Number(res.data[0].ticket_id) + 1;\n            setTicketId(ticketId);\n          } else {\n            const ticketId = 1;\n            setTicketId(ticketId);\n          }\n        });\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventDteails`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventDetails = res.data[0];\n          setEventDetails(eventDetails);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventPurpose`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventPurpose = res.data[0];\n          setEventPurpose(eventPurpose);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventCoordination`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventCoordiation = res.data[0];\n          setEventCoordiation(eventCoordiation);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventImages`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventImages = res.data;\n          setEventImages(eventImages);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, []);\n\n  const handleBuyBtnClick = () => {\n    if (isAuth()) {\n      const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n      const attended = \"N\";\n      const event_id = eventId;\n      const ticket_id = ticketId;\n      const event_name = eventDetails.event_name;\n      const from_date = eventDetails.from_date.slice(0, 10);\n      const from_time = eventDetails.from_time;\n      const to_date = eventDetails.to_date.slice(0, 10);\n      const to_time = eventDetails.to_time;\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/addTickets`, {\n          user_id,\n          attended,\n          event_id,\n          ticket_id,\n          event_name,\n          from_date,\n          from_time,\n          to_date,\n          to_time,\n        })\n        .then((res) => {\n          toast.success(res.data.message);\n          history.push(\"/myTickets\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      toast.error(\"You need to login to use this feature\");\n    }\n  };\n\n  const renderPhotos = (source) => {\n    return source.map((photo) => {\n      return (\n        <img\n          src={photo.path}\n          alt=\"\"\n          key={photo.path}\n          style={{\n            width: \"334px\",\n            height: \"190px\",\n            objectFit: \"cover\",\n            padding: \"0.75rem\",\n          }}\n        />\n      );\n    });\n  };\n  const [showEventDetails, setShowEventDetails] = useState(false);\n  const [showEventCoordination, setShowEventCoordination] = useState(false);\n  const [showEventPurpose, setShowEventPorpose] = useState(false);\n\n  const handleEventDetailsBtnClick = () => {\n    setShowEventDetails(true);\n    setShowEventCoordination(false);\n    setShowEventPorpose(false);\n  };\n  const handleEventCoordinationBtnClick = () => {\n    setShowEventDetails(false);\n    setShowEventCoordination(true);\n    setShowEventPorpose(false);\n  };\n  const handleEventPurposeBtnClick = () => {\n    setShowEventDetails(false);\n    setShowEventCoordination(false);\n    setShowEventPorpose(true);\n  };\n  if (eventId) {\n    return (\n      <div>\n        <Nav />\n        <div className=\"container2\">\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={12}>\n              <div>\n                <div className=\"result\">\n                  {eventImages ? renderPhotos(eventImages) : null}\n                </div>\n              </div>\n            </Grid>\n          </Grid>\n\n          <h1 style={{ fontFamily: \"Arial\", fontSize: \"30px\" }}>\n            {eventDetails ? eventDetails.event_name : \"\"}\n          </h1>\n          <Grid container spacing={2} style={{ fontFamily: \"Arial\" }}>\n            <Grid item xs={12} md={3}>\n              <b>From-Date: </b>\n              {eventDetails ? eventDetails.from_date.slice(0, 10) : \"\"}\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <b>From-Time: </b>\n              {eventDetails ? eventDetails.from_time : \"\"}\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <b>To-Date: </b>\n              {eventDetails ? eventDetails.to_date.slice(0, 10) : \"\"}\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <b>To-Time: </b>\n              {eventDetails ? eventDetails.to_time : \"\"}\n            </Grid>\n            {eventDetails ? (\n              eventDetails.proposed_venue ? (\n                <Grid item xs={12} md={3}>\n                  <b>Proposed-Venue: </b>\n                  {eventDetails.proposed_venue}\n                </Grid>\n              ) : (\n                <Grid item xs={12} md={3}>\n                  <b>Link: </b>\n                  {eventDetails.link}\n                </Grid>\n              )\n            ) : (\n              \"\"\n            )}\n            <Grid item xs={12} md={3}>\n              <b>Expected Guests: </b>\n              {eventDetails ? eventDetails.number_of_expected_guest : \"\"}\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <b>Ticket Price: </b>\n              {eventDetails\n                ? eventDetails.ticket_price\n                  ? eventDetails.ticket_price\n                  : \"Free\"\n                : \"\"}\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <b>Available Ticket: </b>\n              {eventDetails ? eventDetails.ticket_limit : \"\"}\n            </Grid>\n          </Grid>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={1}></Grid>\n            <Grid item xs={12} md={3}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleEventDetailsBtnClick}\n                style={{ marginTop: \"60px\", width: \"100%\" }}\n              >\n                {\" \"}\n                Show Event Details{\" \"}\n              </Button>\n            </Grid>\n\n            <Grid item xs={12} md={3}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleEventPurposeBtnClick}\n                style={{ marginTop: \"60px\", width: \"100%\" }}\n              >\n                {\" \"}\n                Show Event Purpose{\" \"}\n              </Button>\n            </Grid>\n\n            <Grid item xs={12} md={3}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleEventCoordinationBtnClick}\n                style={{ marginTop: \"60px\", width: \"100%\" }}\n              >\n                {\" \"}\n                Show Event Coordination{\" \"}\n              </Button>\n            </Grid>\n            <Grid item xs={12} md={1}></Grid>\n          </Grid>\n          {showEventDetails ? (\n            <div style={{ width: \"100%\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"20px\",\n                  borderBottom: \"2px Solid\",\n                  width: \"140px\",\n                  marginTop: \"40px\",\n                }}\n              >\n                Event Details\n              </h1>\n              <Grid container spacing={5}>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Event Name\"\n                      readonly\n                      value={eventDetails ? eventDetails.event_name : \"\"}\n                      style={{ width: \"100%\", color: \"black\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"From Date\"\n                      readonly\n                      value={\n                        eventDetails ? eventDetails.from_date.slice(0, 10) : \"\"\n                      }\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"From Time\"\n                      readonly\n                      value={eventDetails ? eventDetails.from_time : \"\"}\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"To Date\"\n                      readonly\n                      value={\n                        eventDetails ? eventDetails.to_date.slice(0, 10) : \"\"\n                      }\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"To Time\"\n                      readonly\n                      value={eventDetails ? eventDetails.to_time : \"\"}\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Event Categories\"\n                      readonly\n                      value={\n                        eventDetails ? eventDetails.event_category_title : \"\"\n                      }\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                {eventDetails && eventDetails.other_category_description ? (\n                  <Grid item xs={12} md={4}>\n                    <div style={{ marginTop: \"30px\" }}>\n                      <TextField\n                        required\n                        readonly\n                        label=\"Other Category Description\"\n                        value={eventDetails.other_category_description}\n                        style={{ width: \"100%\" }}\n                      />\n                    </div>\n                  </Grid>\n                ) : null}\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Event Type\"\n                      readonly\n                      value={eventDetails ? eventDetails.event_type : \"\"}\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                {eventDetails && eventDetails.proposed_venue ? (\n                  <Grid item xs={12} md={4}>\n                    <div style={{ marginTop: \"30px\" }}>\n                      <TextField\n                        required\n                        readonly\n                        value={eventDetails.proposed_venue}\n                        label=\"Proposed Venue\"\n                        style={{ width: \"100%\" }}\n                      />\n                    </div>\n                  </Grid>\n                ) : (\n                  <Grid item xs={12} md={4}>\n                    <div style={{ marginTop: \"30px\" }}>\n                      <TextField\n                        required\n                        readonly\n                        value={eventDetails ? eventDetails.link : \"\"}\n                        label=\"Link\"\n                        style={{ width: \"100%\" }}\n                      />\n                    </div>\n                  </Grid>\n                )}\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"No. of Days\"\n                      value={eventDetails ? eventDetails.no_of_days : \"\"}\n                      readonly\n                      s\n                      tyle={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      readonly\n                      value={\n                        eventDetails\n                          ? eventDetails.number_of_expected_guest\n                          : \"\"\n                      }\n                      label=\"Number of expected guests\"\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n              </Grid>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {showEventPurpose ? (\n            <div style={{ width: \"100%\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"20px\",\n                  marginTop: \"50px\",\n                  borderBottom: \"2px Solid\",\n                  width: \"150px\",\n                }}\n              >\n                Event Purpose\n              </h1>\n              <Grid container spacing={5}>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Strategic Objectves / Expected Outcomes:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      value={eventPurpose ? eventPurpose.objectives : \"\"}\n                      placeholder=\"Strategic Objectves / Expected Outcomes:\"\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>Details of the Event:</h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Details of the Event:\"\n                      value={eventPurpose ? eventPurpose.details : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Categories of Expected Guests:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"95%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Categories of Expected Guests:\"\n                      value={eventPurpose ? eventPurpose.guest_category : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Name of Expected External VIPs, if any:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"95%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Name of Expected External VIPs, if any:\"\n                      value={eventPurpose ? eventPurpose.vip_name : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-20px\" }}>\n                    <TextField\n                      required\n                      readonly\n                      label=\"Master of Ceremony (Host)\"\n                      style={{ width: \"100%\" }}\n                      value={eventPurpose ? eventPurpose.host : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <div style={{ marginTop: \"-20px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Executives Required for this Event:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"95%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Executives Required for this Event:\"\n                      value={eventPurpose ? eventPurpose.executives : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <div style={{ marginTop: \"-20px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Proposed role of Executives:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"95%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Proposed role of Executives:\"\n                      value={eventPurpose ? eventPurpose.executives_role : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Date and Time Executive will be required:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Date and Time Executive will be required:\"\n                      value={\n                        eventPurpose ? eventPurpose.executives_date_time : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Proposed speech points will be provided for the\n                      Executives:\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Proposed speech points will be provided for the Executives:\"\n                      value={eventPurpose ? eventPurpose.speech_points : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>Other speakers</h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Other speakers\"\n                      value={eventPurpose ? eventPurpose.other_speakers : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Are media invited / expected\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Are media invited / expected\"\n                      value={eventPurpose ? eventPurpose.media : \"\"}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={12}>\n                  <div style={{ marginTop: \"-40px\" }}>\n                    <h4 style={{ color: \"gray\" }}>\n                      Will there be catering (Please Specify)\n                    </h4>\n                    <TextareaAutosize\n                      style={{\n                        width: \"98%\",\n                        fontSize: \"17px\",\n                        padding: \"10px\",\n                      }}\n                      rowsMin={3}\n                      readonly\n                      placeholder=\"Will there be catering (Please Specify)\"\n                      value={eventPurpose ? eventPurpose.catering : \"\"}\n                    />\n                  </div>\n                </Grid>\n              </Grid>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {showEventCoordination ? (\n            <div style={{ width: \"100%\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"20px\",\n                  marginTop: \"60px\",\n                  borderBottom: \"2px Solid\",\n                  width: \"200px\",\n                }}\n              >\n                Event Coordination\n              </h1>\n              <Grid container spacing={5}>\n                <Grid item xs={12} md={8}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Name of Event Manager\"\n                      style={{ width: \"100%\" }}\n                      readonly\n                      value={\n                        eventCoordiation\n                          ? eventCoordiation.event_manager_name\n                          : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Department\"\n                      style={{ width: \"100%\" }}\n                      readonly\n                      value={\n                        eventCoordiation\n                          ? eventCoordiation.manager_department\n                          : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      label=\"Telephone Number\"\n                      style={{ width: \"100%\" }}\n                      readonly\n                      value={\n                        eventCoordiation\n                          ? eventCoordiation.manager_telephone_number\n                          : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Mobile Number\"\n                      style={{ width: \"100%\" }}\n                      readonly\n                      value={\n                        eventCoordiation\n                          ? eventCoordiation.manager_mobile_number\n                          : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      label=\"Email\"\n                      style={{ width: \"100%\" }}\n                      readonly\n                      value={\n                        eventCoordiation ? eventCoordiation.manager_email : \"\"\n                      }\n                    />\n                  </div>\n                </Grid>\n              </Grid>\n            </div>\n          ) : (\n            \"\"\n          )}\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={9}></Grid>\n            <Grid item xs={12} md={3}>\n              <Button\n                disabled={enrolled ? \"disabled\" : \"\"}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleBuyBtnClick}\n                style={{ marginTop: \"40px\", width: \"100%\" }}\n              >\n                {\" \"}\n                {enrolled\n                  ? \"Already Enrolled\"\n                  : eventDetails\n                  ? eventDetails.ticket_price\n                    ? \"Buy Tickets\"\n                    : \"Participate in this Event\"\n                  : \"\"}{\" \"}\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default EventDetails;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/ViewProfile.jsx",["121"],"import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport { setLocalStorage, removeLocalStorage } from \"../helpers/auth\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { TextField, Button, Grid } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nconst ViewProfile = ({ match }) => {\n  const [userData, setUserData] = useState({\n    first_name: \"\",\n    middle_name: \"\",\n    last_name: \"\",\n    address: \"\",\n    number: \"\",\n    email: \"\",\n    role: \"\",\n    _id: \"\",\n  });\n  useEffect(() => {\n    console.log(JSON.parse(localStorage.getItem(\"user\")));\n    const first_name = JSON.parse(localStorage.getItem(\"user\"))[\"first_name\"];\n    const middle_name = JSON.parse(localStorage.getItem(\"user\"))[\"middle_name\"];\n    const last_name = JSON.parse(localStorage.getItem(\"user\"))[\"last_name\"];\n    const address = JSON.parse(localStorage.getItem(\"user\"))[\"address\"];\n    const number = JSON.parse(localStorage.getItem(\"user\"))[\"number\"];\n    const email = JSON.parse(localStorage.getItem(\"user\"))[\"email\"];\n    const role = JSON.parse(localStorage.getItem(\"user\"))[\"role\"];\n    const _id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n    setUserData({\n      ...userData,\n      first_name,\n      middle_name,\n      last_name,\n      address,\n      number,\n      email,\n      role,\n      _id,\n    });\n  }, []);\n\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  const handleChange = (text) => (e) => {\n    setUserData({ ...userData, [text]: e.target.value });\n  };\n\n  const handleEditCLick = (e) => {\n    e.preventDefault();\n    setIsDisabled(false);\n  };\n  const handleCancleCLick = (e) => {\n    e.preventDefault();\n    setIsDisabled(true);\n  };\n  const handleConfirmCLick = (e) => {\n    e.preventDefault();\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/updateProfileDetails`, userData)\n      .then((res) => {\n        removeLocalStorage(\"user\");\n        setLocalStorage(\"user\", res.data.data);\n\n        window.location = \"/viewProfile\";\n        toast.success(res.data.message);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 flex justify-center\">\n      <Nav />\n      <div className=\"container2\">\n        <h1\n          style={{\n            color: \"#5B4F5B\",\n            textAlign: \"center\",\n            fontFamily: \"Arial\",\n            fontSize: \"30px\",\n          }}\n        >\n          Acccount Details{\" \"}\n        </h1>\n        {isDisabled ? (\n          <Button\n            color=\"primary\"\n            style={{ float: \"right\" }}\n            onClick={handleEditCLick}\n          >\n            <EditIcon color=\"primary\" style={{ marginRight: \"10px\" }} />\n            Edit Profile{\" \"}\n          </Button>\n        ) : (\n          <div>\n            <Button\n              color=\"secondary\"\n              style={{ float: \"right\" }}\n              onClick={handleCancleCLick}\n            >\n              <CancelIcon color=\"secondary\" style={{ marginRight: \"10px\" }} />{\" \"}\n              Cancle{\" \"}\n            </Button>\n            <Button\n              color=\"primary\"\n              style={{ float: \"right\" }}\n              onClick={handleConfirmCLick}\n            >\n              <CheckCircleIcon\n                color=\"primary\"\n                style={{ marginRight: \"10px\" }}\n              />{\" \"}\n              Confirm{\" \"}\n            </Button>\n          </div>\n        )}\n        <form style={{ width: \"100%\" }}>\n          <Grid container spacing={5}>\n            <Grid item xs={12} md={4}>\n              <TextField\n                style={{ width: \"100%\" }}\n                required\n                disabled={isDisabled ? \"disabled\" : \"\"}\n                value={userData ? userData.first_name : \"\"}\n                id=\"standard-required\"\n                label=\"First Name\"\n                onChange={handleChange(\"first_name\")}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                disabled={isDisabled ? \"disabled\" : \"\"}\n                label=\"Middle Name\"\n                style={{ width: \"100%\" }}\n                value={userData ? userData.middle_name : \"\"}\n                onChange={handleChange(\"middle_name\")}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                disabled={isDisabled ? \"disabled\" : \"\"}\n                required\n                label=\"Last Name\"\n                style={{ width: \"100%\" }}\n                value={userData ? userData.last_name : \"\"}\n                onChange={handleChange(\"last_name\")}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                disabled={isDisabled ? \"disabled\" : \"\"}\n                required\n                label=\"Address\"\n                style={{ width: \"100%\" }}\n                value={userData ? userData.address : \"\"}\n                onChange={handleChange(\"address\")}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                disabled={isDisabled ? \"disabled\" : \"\"}\n                required\n                label=\"Contact Number\"\n                style={{ width: \"100%\" }}\n                value={userData ? userData.number : \"\"}\n                onChange={handleChange(\"number\")}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                disabled\n                required\n                label=\"Email\"\n                style={{ width: \"100%\" }}\n                value={userData ? userData.email : \"\"}\n                onChange={handleChange(\"email\")}\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewProfile;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyEventDetails.jsx",["122"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { TextField, Grid, TextareaAutosize } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\n\nconst MyEvents = ({ match }) => {\n  const [eventDetails, setEventDetails] = useState();\n  const [eventPurpose, setEventPurpose] = useState();\n  const [eventCoordiation, setEventCoordiation] = useState();\n  const [eventImages, setEventImages] = useState();\n  const [eventId, setEventId] = useState();\n  useEffect(() => {\n    let eventId = match.params.event_id;\n    setEventId(eventId);\n    if (eventId) {\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventDteails`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventDetails = res.data[0];\n          setEventDetails(eventDetails);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventPurpose`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventPurpose = res.data[0];\n          setEventPurpose(eventPurpose);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventCoordination`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventCoordiation = res.data[0];\n          setEventCoordiation(eventCoordiation);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getEventImages`, {\n          event_id: eventId,\n        })\n        .then((res) => {\n          const eventImages = res.data;\n          setEventImages(eventImages);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, []);\n\n  const renderPhotos = (source) => {\n    return source.map((photo) => {\n      return (\n        <img\n          src={photo.path}\n          alt=\"\"\n          key={photo.path}\n          style={{\n            width: \"334px\",\n            height: \"190px\",\n            objectFit: \"cover\",\n            padding: \"0.75rem\",\n          }}\n        />\n      );\n    });\n  };\n\n  if (eventId) {\n    return (\n      <div>\n        <Nav />\n        <div className=\"container2\">\n          <h1\n            style={{ color: \"#5B4F5B\", fontFamily: \"Arial\", fontSize: \"30px\" }}\n          >\n            Event Details\n          </h1>\n          <h1\n            style={{\n              color: \"#5662F6\",\n              fontFamily: \"Arial\",\n              fontSize: \"20px\",\n              borderBottom: \"2px Solid\",\n              width: \"140px\",\n            }}\n          >\n            Event Details\n          </h1>\n          <form style={{ width: \"100%\" }}>\n            <Grid container spacing={5}>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Event Name\"\n                    readonly\n                    value={eventDetails ? eventDetails.event_name : \"\"}\n                    style={{ width: \"100%\", color: \"black\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"From Date\"\n                    readonly\n                    value={\n                      eventDetails ? eventDetails.from_date.slice(0, 10) : \"\"\n                    }\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"From Time\"\n                    readonly\n                    value={eventDetails ? eventDetails.from_time : \"\"}\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"To Date\"\n                    readonly\n                    value={\n                      eventDetails ? eventDetails.to_date.slice(0, 10) : \"\"\n                    }\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"To Time\"\n                    readonly\n                    value={eventDetails ? eventDetails.to_time : \"\"}\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Event Categories\"\n                    readonly\n                    value={\n                      eventDetails ? eventDetails.event_category_title : \"\"\n                    }\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              {eventDetails && eventDetails.other_category_description ? (\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      readonly\n                      label=\"Other Category Description\"\n                      value={eventDetails.other_category_description}\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n              ) : null}\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Event Type\"\n                    readonly\n                    value={eventDetails ? eventDetails.event_type : \"\"}\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              {eventDetails && eventDetails.proposed_venue ? (\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      readonly\n                      value={eventDetails.proposed_venue}\n                      label=\"Proposed Venue\"\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n              ) : (\n                <Grid item xs={12} md={4}>\n                  <div style={{ marginTop: \"30px\" }}>\n                    <TextField\n                      required\n                      readonly\n                      value={eventDetails ? eventDetails.link : \"\"}\n                      label=\"Link\"\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                </Grid>\n              )}\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"No. of Days\"\n                    value={eventDetails ? eventDetails.no_of_days : \"\"}\n                    readonly\n                    s\n                    tyle={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    readonly\n                    value={\n                      eventDetails ? eventDetails.number_of_expected_guest : \"\"\n                    }\n                    label=\"Number of expected guests\"\n                    style={{ width: \"100%\" }}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div>\n                  <h3\n                    style={{\n                      fontFamily: \"MV Boli\",\n                      fontWeight: \"bold\",\n                      marginTop: \"20px\",\n                      color: \"#5662F6\",\n                      borderBottom: \"2px solid\",\n                      width: \"14%\",\n                    }}\n                  >\n                    Images:\n                  </h3>\n                  <div className=\"result\">\n                    {eventImages ? renderPhotos(eventImages) : null}\n                  </div>\n                </div>\n              </Grid>\n              {/* \n                            <Grid item xs={12} md={12}>\n                            <div>\n                                <input type=\"file\" id=\"file\" multiple onChange={handleImageChange} />\n                                <h3 style={{fontFamily:\"MV Boli\", fontWeight:\"bold\", marginTop:\"20px\", color:'#BF9000'}}>Insert Images:</h3>\n                                <div className=\"label-holder\">\n                                \n                                    <label htmlFor=\"file\" className=\"label\">\n                                        \n                                        <i className=\"material-icons\">add_a_photo</i>\n                                    </label>\n                                </div>\n                                <div className=\"result\">{renderPhotos(selectedFiles)}</div>\n                            </div>\n                            </Grid> */}\n            </Grid>\n\n            <h1\n              style={{\n                color: \"#5662F6\",\n                fontFamily: \"Arial\",\n                fontSize: \"20px\",\n                marginTop: \"50px\",\n                borderBottom: \"2px Solid\",\n                width: \"150px\",\n              }}\n            >\n              Event Purpose\n            </h1>\n            <Grid container spacing={5}>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Strategic Objectves / Expected Outcomes:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    value={eventPurpose ? eventPurpose.objectives : \"\"}\n                    placeholder=\"Strategic Objectves / Expected Outcomes:\"\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>Details of the Event:</h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Details of the Event:\"\n                    value={eventPurpose ? eventPurpose.details : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Categories of Expected Guests:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Categories of Expected Guests:\"\n                    value={eventPurpose ? eventPurpose.guest_category : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Name of Expected External VIPs, if any:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Name of Expected External VIPs, if any:\"\n                    value={eventPurpose ? eventPurpose.vip_name : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-20px\" }}>\n                  <TextField\n                    required\n                    readonly\n                    label=\"Master of Ceremony (Host)\"\n                    style={{ width: \"100%\" }}\n                    value={eventPurpose ? eventPurpose.host : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <div style={{ marginTop: \"-20px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Executives Required for this Event:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Executives Required for this Event:\"\n                    value={eventPurpose ? eventPurpose.executives : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <div style={{ marginTop: \"-20px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Proposed role of Executives:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"95%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Proposed role of Executives:\"\n                    value={eventPurpose ? eventPurpose.executives_role : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Date and Time Executive will be required:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Date and Time Executive will be required:\"\n                    value={\n                      eventPurpose ? eventPurpose.executives_date_time : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Proposed speech points will be provided for the Executives:\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Proposed speech points will be provided for the Executives:\"\n                    value={eventPurpose ? eventPurpose.speech_points : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>Other speakers</h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Other speakers\"\n                    value={eventPurpose ? eventPurpose.other_speakers : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Are media invited / expected\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Are media invited / expected\"\n                    value={eventPurpose ? eventPurpose.media : \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={12}>\n                <div style={{ marginTop: \"-40px\" }}>\n                  <h4 style={{ color: \"gray\" }}>\n                    Will there be catering (Please Specify)\n                  </h4>\n                  <TextareaAutosize\n                    style={{ width: \"98%\", fontSize: \"17px\", padding: \"10px\" }}\n                    rowsMin={3}\n                    readonly\n                    placeholder=\"Will there be catering (Please Specify)\"\n                    value={eventPurpose ? eventPurpose.catering : \"\"}\n                  />\n                </div>\n              </Grid>\n            </Grid>\n\n            <h1\n              style={{\n                color: \"#5662F6\",\n                fontFamily: \"Arial\",\n                fontSize: \"20px\",\n                marginTop: \"60px\",\n                borderBottom: \"2px Solid\",\n                width: \"200px\",\n              }}\n            >\n              Event Coordination\n            </h1>\n            <Grid container spacing={5}>\n              <Grid item xs={12} md={8}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Name of Event Manager\"\n                    style={{ width: \"100%\" }}\n                    readonly\n                    value={\n                      eventCoordiation\n                        ? eventCoordiation.event_manager_name\n                        : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Department\"\n                    style={{ width: \"100%\" }}\n                    readonly\n                    value={\n                      eventCoordiation\n                        ? eventCoordiation.manager_department\n                        : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    label=\"Telephone Number\"\n                    style={{ width: \"100%\" }}\n                    readonly\n                    value={\n                      eventCoordiation\n                        ? eventCoordiation.manager_telephone_number\n                        : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Mobile Number\"\n                    style={{ width: \"100%\" }}\n                    readonly\n                    value={\n                      eventCoordiation\n                        ? eventCoordiation.manager_mobile_number\n                        : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <div style={{ marginTop: \"30px\" }}>\n                  <TextField\n                    required\n                    label=\"Email\"\n                    style={{ width: \"100%\" }}\n                    readonly\n                    value={\n                      eventCoordiation ? eventCoordiation.manager_email : \"\"\n                    }\n                  />\n                </div>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default MyEvents;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyTickets.jsx",["123","124","125","126","127","128","129","130"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\nimport QRCode from \"qrcode.react\";\n\nconst EventTickets = ({ match }) => {\n  const [myEventDetails, setMyEventDetails] = useState([]);\n  const [imageList, setImageList] = useState([[]]);\n  const [eventId, setEventId] = useState();\n  const [myTickets, setMyTickets] = useState([]);\n  const [ticketEmpty, setTicketEmpty] = useState(true);\n  useEffect(() => {\n    const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n    if (user_id) {\n      axios\n        .post(`${process.env.REACT_APP_EVENT_API_URL}/getMyTickets`, {\n          user_id: user_id,\n        })\n        .then((res) => {\n          if (res.data.length != 0) {\n            setTicketEmpty(false);\n            setMyTickets(res.data);\n          } else {\n            setTicketEmpty(true);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    let eventId = match.params.event_id;\n    setEventId(eventId);\n    console.log(imageList);\n    if (!imageList[1]) {\n      setImageList([]);\n      const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n\n      if (user_id) {\n        axios\n          .post(`${process.env.REACT_APP_EVENT_API_URL}/getMyEvents`, {\n            user_id: user_id,\n          })\n          .then((res) => {\n            if (res.data.length != 0) {\n              const myEventDetails = res.data;\n              setMyEventDetails(myEventDetails);\n              setImageList([]);\n              console.log(imageList);\n              for (var i = 0; i < res.data.length; i++) {\n                axios\n                  .post(`${process.env.REACT_APP_EVENT_API_URL}/getImageList`, {\n                    event_id: res.data[i].event_id,\n                  })\n                  .then((res) => {\n                    if (res.data.length != 0) {\n                      var imageListTemp = imageList;\n                      var eachEventImage = res.data;\n                      imageListTemp.push(eachEventImage);\n                      setImageList(imageListTemp);\n                    } else {\n                      var imageListTemp = imageList;\n                      var eachEventImage = [];\n                      imageListTemp.push(eachEventImage);\n                      setImageList(imageListTemp);\n                    }\n                  })\n                  .catch((err) => {\n                    console.log(\"jhadskjfhk\");\n                  });\n              }\n            }\n          })\n          .catch((err) => {\n            console.log(err.response);\n          });\n      }\n    }\n  }, []);\n\n  const renderTickets = (myTickets) => {\n    return (\n      myTickets &&\n      myTickets.map((myTicket, i) => {\n        return (\n          <Grid key={i} container spacing={2}>\n            <Grid xs={12} key={i} md={3} style={{ marginTop: \"100px\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"17px\",\n                  textAlign: \"center\",\n                }}\n              >\n                {myTicket.event_name}\n              </h1>\n            </Grid>\n            <Grid xs={12} key={i} md={3} style={{ marginTop: \"100px\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"17px\",\n                  textAlign: \"center\",\n                }}\n              >\n                {myTicket.from_date.slice(0, 10)} ({myTicket.from_time})\n              </h1>\n            </Grid>\n            <Grid xs={12} key={i} md={3} style={{ marginTop: \"100px\" }}>\n              <h1\n                style={{\n                  color: \"#5662F6\",\n                  fontFamily: \"Arial\",\n                  fontSize: \"17px\",\n                  textAlign: \"center\",\n                }}\n              >\n                {myTicket.to_date.slice(0, 10)} ({myTicket.to_time})\n              </h1>\n            </Grid>\n            <Grid\n              xs={12}\n              key={i}\n              md={3}\n              style={{ marginTop: \"25px\", textAlign: \"center\" }}\n            >\n              <QRCode\n                id={myTicket.ticket_id}\n                value={JSON.stringify(myTicket)}\n                size=\"200\"\n                level=\"M\"\n              />\n              <Button\n                variant=\"outlined\"\n                style={{ marginTop: \"10px\" }}\n                color=\"primary\"\n                onClick={() => {\n                  const canvas = document.getElementById(myTicket.ticket_id);\n                  const pngUrl = canvas\n                    .toDataURL(\"image/png\")\n                    .replace(\"image/png\", \"image/octet-stream\");\n                  let downloadLink = document.createElement(\"a\");\n                  downloadLink.href = pngUrl;\n                  downloadLink.download = myTicket.event_name + \".png\";\n                  document.body.appendChild(downloadLink);\n                  downloadLink.click();\n                  document.body.removeChild(downloadLink);\n                }}\n              >\n                Download Ticket\n              </Button>\n            </Grid>\n            <Grid xs={12} key={i} md={12}>\n              <hr style={{ marginTop: \"25px\" }} />\n            </Grid>\n          </Grid>\n        );\n      })\n    );\n  };\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 flex justify-center\">\n      <Nav />\n      <div className=\"container2\">\n        {/* <button onClick={handleClick}>lol</button> */}\n        {ticketEmpty ? (\n          <h1\n            style={{ color: \"#5662F6\", fontFamily: \"Arial\", fontSize: \"30px\" }}\n          >\n            No Ticket Purchased{\" \"}\n          </h1>\n        ) : (\n          <div>\n            <h1\n              style={{\n                color: \"#5B4F5B\",\n                fontFamily: \"Arial\",\n                fontSize: \"30px\",\n                textAlign: \"center\",\n              }}\n            >\n              My Events Tickets{\" \"}\n            </h1>\n            <Grid container spacing={2}>\n              <Grid xs={12} md={3} style={{ marginTop: \"20px\" }}>\n                <h1\n                  style={{\n                    fontFamily: \"Arial\",\n                    fontSize: \"20px\",\n                    borderBottom: \"2px Solid\",\n                    width: \"90%\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  Event Name\n                </h1>\n              </Grid>\n              <Grid xs={12} md={3} style={{ marginTop: \"20px\" }}>\n                <h1\n                  style={{\n                    fontFamily: \"Arial\",\n                    fontSize: \"20px\",\n                    borderBottom: \"2px Solid\",\n                    width: \"90%\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  From Date and Time\n                </h1>\n              </Grid>\n              <Grid xs={12} md={3} style={{ marginTop: \"20px\" }}>\n                <h1\n                  style={{\n                    fontFamily: \"Arial\",\n                    fontSize: \"20px\",\n                    borderBottom: \"2px Solid\",\n                    width: \"90%\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  To Date and Time\n                </h1>\n              </Grid>\n              <Grid xs={12} md={3} style={{ marginTop: \"20px\" }}>\n                <h1\n                  style={{\n                    fontFamily: \"Arial\",\n                    fontSize: \"20px\",\n                    borderBottom: \"2px Solid\",\n                    width: \"90%\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  Ticket\n                </h1>\n              </Grid>\n            </Grid>\n            {renderTickets(myTickets)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EventTickets;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/MyEvents.jsx",["131","132","133","134","135","136"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport \"./registerStyle.css\";\nimport { Grid, Card, CardActionArea, CardContent } from \"@material-ui/core\";\nimport Nav from \"./nav.js\";\n\nconst EventDetails = ({ match }) => {\n  const [myEventDetails, setMyEventDetails] = useState([]);\n  const [imageList, setImageList] = useState([[]]);\n  const [eventId, setEventId] = useState();\n  useEffect(() => {\n    let eventId = match.params.event_id;\n    setEventId(eventId);\n    console.log(imageList);\n    if (!imageList[1]) {\n      setImageList([]);\n      const user_id = JSON.parse(localStorage.getItem(\"user\"))[\"_id\"];\n\n      if (user_id) {\n        axios\n          .post(`${process.env.REACT_APP_EVENT_API_URL}/getMyEvents`, {\n            user_id: user_id,\n          })\n          .then((res) => {\n            if (res.data.length != 0) {\n              const myEventDetails = res.data;\n              setMyEventDetails(myEventDetails);\n              setImageList([]);\n              console.log(imageList);\n              for (var i = 0; i < res.data.length; i++) {\n                axios\n                  .post(`${process.env.REACT_APP_EVENT_API_URL}/getImageList`, {\n                    event_id: res.data[i].event_id,\n                  })\n                  .then((res) => {\n                    if (res.data.length != 0) {\n                      var imageListTemp = imageList;\n                      var eachEventImage = res.data;\n                      imageListTemp.push(eachEventImage);\n                      setImageList(imageListTemp);\n                    } else {\n                      var imageListTemp = imageList;\n                      var eachEventImage = [];\n                      imageListTemp.push(eachEventImage);\n                      setImageList(imageListTemp);\n                    }\n                  })\n                  .catch((err) => {\n                    console.log(\"jhadskjfhk\");\n                  });\n              }\n            }\n          })\n          .catch((err) => {\n            console.log(err.response);\n          });\n      }\n    }\n  }, []);\n\n  const renderEvents = (myEventDetails) => {\n    return (\n      myEventDetails &&\n      myEventDetails.map((myEvent, i) => {\n        return (\n          <Grid item xs={12} key={i} md={4} style={{ marginTop: \"20px\" }}>\n            <Link\n              to={\"/myEventDetails/\" + myEvent.event_id}\n              style={{ textDecoration: \"none\" }}\n            >\n              <Card className=\"items\" style={{ backgroundColor: \"#FAF4AA\" }}>\n                <CardActionArea>\n                  <CardContent>\n                    <h1\n                      style={{\n                        fontFamily: \"Arial\",\n                        marginTop: \"0px\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      {myEvent.event_name}\n                    </h1>\n                    <Grid container spacing={2} style={{ fontFamily: \"Arial\" }}>\n                      <Grid item xs={12} md={6}>\n                        <b>From: </b>\n                        {myEvent.from_date.slice(0, 10)}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>To: </b>\n                        {myEvent.to_date.slice(0, 10)}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Ticket Price: </b>\n                        {myEvent.ticket_price ? myEvent.ticket_price : \"Free\"}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Available Ticket: </b>\n                        {myEvent.ticket_limit}\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <b>Venue: </b>\n                        {myEvent.proposed_venue}\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Link>\n          </Grid>\n        );\n      })\n    );\n  };\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 flex justify-center\">\n      <Nav />\n      <div className=\"container2\">\n        <h1\n          style={{\n            color: \"#5B4F5B\",\n            fontFamily: \"Arial\",\n            fontSize: \"30px\",\n            borderBottom: \"2px Solid\",\n            textAlign: \"center\",\n          }}\n        >\n          My Events{\" \"}\n        </h1>\n        <h1\n          style={{\n            color: \"#5662F6\",\n            fontFamily: \"Arial\",\n            fontSize: \"20px\",\n          }}\n        >\n          All Events\n        </h1>\n        <Grid container spacing={2}>\n          {renderEvents(myEventDetails)}\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default EventDetails;\n","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/menu.js",[],"/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/Components/profile.js",["137"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {Link} from 'react-router-dom';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport { isAuth, signout } from '../helpers/auth';\nimport { toast } from 'react-toastify';\n\nfunction NotLoggedIn(){\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleProfileClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleProfileClose = () => {\n    setAnchorEl(null);\n  };\n  \n\n  return (\n    <div>\n      <Button aria-controls=\"profile-menu\" aria-haspopup=\"true\" onClick={handleProfileClick} style={{marginTop:'-10px',marginLeft:'25px'}}>\n        <AccountCircleIcon style={{\n                            fontSize:'45px',\n                            color:'whitesmoke',\n                            \n        }}/>\n      </Button>\n      <Menu\n        id=\"profile-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleProfileClose}\n        style={{marginTop:'53px'}}\n      >\n        \n        <MenuItem style={{borderBottom: '1px Solid', fontWeight:'bold', backgroundColor:'whitesmoke'}}>Profile:</MenuItem>\n        <MenuItem onClick={handleProfileClose}><Link className=\"linkRemoveStyle\" to='/register'>Register</Link></MenuItem>\n        <MenuItem onClick={handleProfileClose}><Link className=\"linkRemoveStyle\" to='/login'>Login</Link></MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nfunction LoggedIn(props){\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleProfileClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleProfileClose = () => {\n    setAnchorEl(null);\n  };\n  const handleLogout = () => {\n    setAnchorEl(null);\n    signout( () => {\n      toast.success(`Successfully Logged Out`);\n    });\n  };\n  var viewProfile = '/' + props.userName + '/viewProfile'\n  return (\n    <div>\n      <Button aria-controls=\"profile-menu\" aria-haspopup=\"true\" onClick={handleProfileClick} style={{marginTop:'-10px',marginLeft:'25px'}}>\n        <AccountCircleIcon style={{\n                            fontSize:'45px',\n                            color:'whitesmoke',\n                            \n        }}/>\n      </Button>\n      <Menu\n        id=\"profile-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleProfileClose}\n        style={{marginTop:'53px'}}\n      >\n        \n        <MenuItem style={{borderBottom: '1px Solid', fontWeight:'bold', backgroundColor:'whitesmoke'}}>Profile:</MenuItem>\n        <MenuItem onClick={handleProfileClose}><Link className=\"linkRemoveStyle\" to='/viewProfile'>View Profile</Link></MenuItem>\n        <MenuItem onClick={handleLogout}><Link className=\"linkRemoveStyle\" to='/'>Logout</Link></MenuItem>\n        \n      </Menu>\n    </div>\n  );\n}\nexport default function SimpleMenu(props) {\n  if(isAuth()){\n    return <LoggedIn/>;\n    \n  }else{\n    return <NotLoggedIn/>;\n  }\n  \n}","/Users/pawanchaudhary/Desktop/FYP/Project Folder/03 Cervent - Development/Cervent/src/helpers/auth.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":11},{"ruleId":"142","severity":1,"message":"146","line":17,"column":26,"nodeType":"144","messageId":"145","endLine":17,"endColumn":31},{"ruleId":"142","severity":1,"message":"147","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":16},{"ruleId":"148","severity":1,"message":"149","line":22,"column":8,"nodeType":"150","endLine":22,"endColumn":10,"suggestions":"151"},{"ruleId":"142","severity":1,"message":"152","line":8,"column":8,"nodeType":"144","messageId":"145","endLine":8,"endColumn":22},{"ruleId":"142","severity":1,"message":"153","line":9,"column":16,"nodeType":"144","messageId":"145","endLine":9,"endColumn":24},{"ruleId":"142","severity":1,"message":"154","line":11,"column":8,"nodeType":"144","messageId":"145","endLine":11,"endColumn":17},{"ruleId":"142","severity":1,"message":"155","line":17,"column":3,"nodeType":"144","messageId":"145","endLine":17,"endColumn":9},{"ruleId":"142","severity":1,"message":"156","line":18,"column":3,"nodeType":"144","messageId":"145","endLine":18,"endColumn":11},{"ruleId":"142","severity":1,"message":"157","line":19,"column":3,"nodeType":"144","messageId":"145","endLine":19,"endColumn":13},{"ruleId":"158","severity":1,"message":"159","line":202,"column":26,"nodeType":"160","messageId":"161","endLine":202,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":216,"column":20,"nodeType":"160","messageId":"161","endLine":216,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":230,"column":20,"nodeType":"160","messageId":"161","endLine":230,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":271,"column":43,"nodeType":"160","messageId":"161","endLine":271,"endColumn":45},{"ruleId":"158","severity":1,"message":"159","line":274,"column":47,"nodeType":"160","messageId":"161","endLine":274,"endColumn":49},{"ruleId":"158","severity":1,"message":"159","line":294,"column":43,"nodeType":"160","messageId":"161","endLine":294,"endColumn":45},{"ruleId":"158","severity":1,"message":"159","line":297,"column":47,"nodeType":"160","messageId":"161","endLine":297,"endColumn":49},{"ruleId":"158","severity":1,"message":"162","line":342,"column":31,"nodeType":"160","messageId":"161","endLine":342,"endColumn":33},{"ruleId":"148","severity":1,"message":"163","line":360,"column":6,"nodeType":"150","endLine":360,"endColumn":20,"suggestions":"164"},{"ruleId":"142","severity":1,"message":"165","line":361,"column":11,"nodeType":"144","messageId":"145","endLine":361,"endColumn":21},{"ruleId":"142","severity":1,"message":"166","line":361,"column":23,"nodeType":"144","messageId":"145","endLine":361,"endColumn":34},{"ruleId":"142","severity":1,"message":"167","line":361,"column":36,"nodeType":"144","messageId":"145","endLine":361,"endColumn":45},{"ruleId":"168","severity":1,"message":"169","line":602,"column":19,"nodeType":"170","endLine":602,"endColumn":44},{"ruleId":"148","severity":1,"message":"171","line":39,"column":6,"nodeType":"150","endLine":39,"endColumn":20,"suggestions":"172"},{"ruleId":"142","severity":1,"message":"173","line":40,"column":54,"nodeType":"144","messageId":"145","endLine":40,"endColumn":58},{"ruleId":"158","severity":1,"message":"162","line":30,"column":33,"nodeType":"160","messageId":"161","endLine":30,"endColumn":35},{"ruleId":"158","severity":1,"message":"162","line":40,"column":31,"nodeType":"160","messageId":"161","endLine":40,"endColumn":33},{"ruleId":"148","severity":1,"message":"174","line":97,"column":6,"nodeType":"150","endLine":97,"endColumn":8,"suggestions":"175"},{"ruleId":"148","severity":1,"message":"176","line":45,"column":6,"nodeType":"150","endLine":45,"endColumn":8,"suggestions":"177"},{"ruleId":"148","severity":1,"message":"174","line":66,"column":6,"nodeType":"150","endLine":66,"endColumn":8,"suggestions":"178"},{"ruleId":"142","severity":1,"message":"179","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":24},{"ruleId":"142","severity":1,"message":"180","line":12,"column":10,"nodeType":"144","messageId":"145","endLine":12,"endColumn":17},{"ruleId":"158","severity":1,"message":"162","line":23,"column":31,"nodeType":"160","messageId":"161","endLine":23,"endColumn":33},{"ruleId":"158","severity":1,"message":"162","line":47,"column":33,"nodeType":"160","messageId":"161","endLine":47,"endColumn":35},{"ruleId":"158","severity":1,"message":"162","line":58,"column":41,"nodeType":"160","messageId":"161","endLine":58,"endColumn":43},{"ruleId":"181","severity":1,"message":"182","line":64,"column":27,"nodeType":"144","messageId":"183","endLine":64,"endColumn":40},{"ruleId":"181","severity":1,"message":"184","line":65,"column":27,"nodeType":"144","messageId":"183","endLine":65,"endColumn":41},{"ruleId":"148","severity":1,"message":"185","line":81,"column":6,"nodeType":"150","endLine":81,"endColumn":8,"suggestions":"186"},{"ruleId":"142","severity":1,"message":"180","line":12,"column":10,"nodeType":"144","messageId":"145","endLine":12,"endColumn":17},{"ruleId":"158","severity":1,"message":"162","line":27,"column":33,"nodeType":"160","messageId":"161","endLine":27,"endColumn":35},{"ruleId":"158","severity":1,"message":"162","line":38,"column":41,"nodeType":"160","messageId":"161","endLine":38,"endColumn":43},{"ruleId":"181","severity":1,"message":"182","line":44,"column":27,"nodeType":"144","messageId":"183","endLine":44,"endColumn":40},{"ruleId":"181","severity":1,"message":"184","line":45,"column":27,"nodeType":"144","messageId":"183","endLine":45,"endColumn":41},{"ruleId":"148","severity":1,"message":"185","line":61,"column":6,"nodeType":"150","endLine":61,"endColumn":8,"suggestions":"187"},{"ruleId":"142","severity":1,"message":"188","line":64,"column":7,"nodeType":"144","messageId":"145","endLine":64,"endColumn":18},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'userId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formData' and 'match.params.token'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["191"],"'FilterListIcon' is defined but never used.","'Redirect' is defined but never used.","'LogoWhite' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'InputLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'eventCoordination', 'eventDetailsData', 'eventPurpose', and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["192"],"'first_name' is assigned a value but never used.","'middle_name' is assigned a value but never used.","'last_name' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["193"],"'show' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.event_id'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array. You can also do a functional update 'setUserData(u => ...)' if you only need 'userData' in the 'setUserData' call.",["195"],["196"],"'myEventDetails' is assigned a value but never used.","'eventId' is assigned a value but never used.","no-redeclare","'imageListTemp' is already defined.","redeclared","'eachEventImage' is already defined.","React Hook useEffect has missing dependencies: 'imageList' and 'match.params.event_id'. Either include them or remove the dependency array.",["197"],["198"],"'viewProfile' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"205","fix":"209"},{"desc":"210","fix":"211"},{"desc":"210","fix":"212"},"Update the dependencies array to be: [formData, match.params.token]",{"range":"213","text":"214"},"Update the dependencies array to be: [eventCoordination, eventDetailsData, eventPurpose, formData, match.params]",{"range":"215","text":"216"},"Update the dependencies array to be: [formData, match.params]",{"range":"217","text":"218"},"Update the dependencies array to be: [match.params.event_id]",{"range":"219","text":"220"},"Update the dependencies array to be: [userData]",{"range":"221","text":"222"},{"range":"223","text":"220"},"Update the dependencies array to be: [imageList, match.params.event_id]",{"range":"224","text":"225"},{"range":"226","text":"225"},[629,631],"[formData, match.params.token]",[12073,12087],"[eventCoordination, eventDetailsData, eventPurpose, formData, match.params]",[1060,1074],"[formData, match.params]",[2946,2948],"[match.params.event_id]",[1546,1548],"[userData]",[1911,1913],[2715,2717],"[imageList, match.params.event_id]",[2150,2152]]